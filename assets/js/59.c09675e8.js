(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{419:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_5-1-local-map-地图处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-local-map-地图处理"}},[t._v("#")]),t._v(" 5.1. Local Map 地图处理")]),t._v(" "),a("p",[t._v("想必你已经阅读过 Alas 的海图识别的文档。在识别之后，"),a("code",[t._v("module/map_detection/view.py")]),t._v(" 将两种识别方法封装了起来，并整合了敌人识别")]),t._v(" "),a("h2",{attrs:{id:"局部地图识别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部地图识别"}},[t._v("#")]),t._v(" 局部地图识别")]),t._v(" "),a("p",[a("code",[t._v("View")]),t._v(" 对象的识别结果，称为局部地图（Local Map）。局部地图的识别只需要一张游戏截图，并且可以在 Alas 外运行，你可以使用以下代码来调试 Alas 的海图识别。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Paste your config here")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Image filepath here")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\nmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" View"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AzurLaneConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'template'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nimage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("convert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'RGB'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you have any `homo_storage` in log, paste here and uncomment")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sto = ((8, 5), [(355, 117), (1265, 117), (288, 559), (1417, 559)])")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# md.backend.load_homography(storage=sto)")]),t._v("\n\nmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("predict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("draw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"view-config-mode-main"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-config-mode-main"}},[t._v("#")]),t._v(" View(config, mode='main')")]),t._v(" "),a("p",[t._v("创建一个 View 对象，需要 AzurLaneConfig，模式可选普通图 "),a("code",[t._v("main")]),t._v(" 或者大世界  "),a("code",[t._v("os")]),t._v("。")]),t._v(" "),a("p",[t._v("默认情况下，局部地图识别使用 Homography 方法识别，你可以在 config 里指定识别方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DETECTION_BACKEND = 'perspective'  # Or 'homography'\n")])])]),a("p",[t._v("在 Homography 方法下，第一次识别会调用 Perspective 方法计算透视变换参数，并缓存至 homo_storage。一般而言，海域内的透视不会变化，Alas 会一直使用同一个 View 对象，同一个 View 对象也会使用同一个 homo_storage，直到任务切换。如果第一次计算的透视变换参数不正确（比如镜头位于角落），会影响到接下来的识别。而在 Perspective 方法下，不会有这个影响。")]),t._v(" "),a("h2",{attrs:{id:"load-self-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-self-image"}},[t._v("#")]),t._v(" load(self, image)")]),t._v(" "),a("p",[t._v("载入一张截图，完成海图识别，获得以下属性：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("grids")]),t._v(" 海域中的每一个格子，"),a("code",[t._v("dict, key: (x, y), value: Grid object")])]),t._v(" "),a("li",[a("strong",[t._v("shape")]),t._v(" 局部海域的大小，"),a("code",[t._v("(x, y)")])]),t._v(" "),a("li",[a("strong",[t._v("center_loca")]),t._v(" 镜头中心对准的格子的坐标，"),a("code",[t._v("(x, y)")])]),t._v(" "),a("li",[a("strong",[t._v("center_offset")]),t._v(" 镜头中心偏离格子中心的向量，在计算滑动距离时使用")]),t._v(" "),a("li",[a("strong",[t._v("swipe_base")]),t._v(" 反映海域中网格大小的量，在计算滑动距离时使用")])]),t._v(" "),a("h2",{attrs:{id:"predict-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predict-self"}},[t._v("#")]),t._v(" predict(self)")]),t._v(" "),a("p",[t._v("识别地图中的敌人，问号，己方舰队等")]),t._v(" "),a("h2",{attrs:{id:"update-self-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-self-image"}},[t._v("#")]),t._v(" update(self, image)")]),t._v(" "),a("p",[t._v("在不重新进行海图识别的情况下，将图片载入至所有格子内")]),t._v(" "),a("h2",{attrs:{id:"select-self-kwargs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-self-kwargs"}},[t._v("#")]),t._v(" select(self, **kwargs)")]),t._v(" "),a("p",[t._v("选择海域中任何你感兴趣格子，返回 SelectedGrids 对象")])])}),[],!1,null,null,null);a.default=n.exports}}]);